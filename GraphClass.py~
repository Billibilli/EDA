class eulerGraph(object):
	def __init__(self, eulerGraphInput={}):
		self.__eulerGraphDic = eulerGraphInput

	def findEulerPath(self):
		self.eulerTempPath=[]
		self.eulerFinalPath=[]
		self.eulerEdges=self.__getEdges()
		for vertex in self.__eulerGraphDic:
			if len(vertex)!= 0:
				return self.__findOneEulerPath(self.__eulerGraphDic.keys()[0])

	def __findOneEulerPath(self,root):
		for neighbour in self.__eulerGraphDic[root]:
			self.eulerTempPath.append(neighbor)
			self.eulerEdges.pop(edge.index({root,neighbor}))
			if(neighbour==root):
				if(len(eulerEdges)!=0):
					for i in reversed(self.eulerTempPath):
						for k in eulerEdges:
							if i in k:
								self.eulerFinalPath=self.eulerFinalPath+eulerTempPath[eulerTempPath.index(i)+1:len(eulerTempPath)]
								self.eulerTempPath=eulerTempPath[0:eulerTempPath.index(i)]
								return self.__findOneEulerPath(i)
				else:
					self.eulerTempPath=[]
					self.eulerFinalPath=self.eulerFinalPath+eulerTempPath[eulerTempPath.index(i)+1:len(eulerTempPath)]
					return self.eulerFinalPath
			else:
				self.__findOneEulerPath(self,neighbor)
		
	def __getEdges(self):
		edges = []
		for vertex in self.__eulerGraphDic:
			for neighbour in self.__eulerGraphDic[vertex]:
				if {neighbour, vertex} not in edges:
					edges.append({vertex, neighbour})
		return edges 

	def __printTour(self):
		res = ""
		for i in self.eulerFinalPath:
			res += str(i) + "->"
		res=res[0:(len(res)-len("->"))] 
		return res
